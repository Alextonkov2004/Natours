//1A) Filltering
    //const queryObj = Object.assign({}, req.query);
    //const queryObj = {...req.query}
    //const excludeFields = ['page', 'sort', 'limit', 'fields'];
    //excludeFields.forEach((el) => delete queryObj[el]);
    //console.log(req.query, queryObj);

    //1B) Advanced Filltering
    //let queryStr = JSON.stringify(queryObj);
    //queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);
    //console.log(JSON.parse(queryStr));

    //let query = Tour.find(JSON.parse(queryStr));

    //const query = Tour.find().where('duration').equals(5).where('difficulty').equals('easy')
    // 2) Sorting
    //if (req.query.sort) {
    //const sortBy = req.query.sort.split(',').join(' ');
    //console.log(sortBy);
    //query = query.sort(sortBy);
    //} else {
    //query = query.sort('price');
    //}
    // 3) Field limiting
    // if (req.query.fields) {
    // const fields = req.query.fields.split(',').join(' ');
    // query = query.select(fields);
    //} else {
    //  query = query.select('-__v');
    //}
    //4) Pagination
    //const page = req.query.page * 1 || 1;
    //const limit = req.query.limit * 1 || 100;
    //const skip = (page - 1) * limit;

    //query = query.skip(skip).limit(limit);
    //if (req.query.page) {
    //const numTours = await Tour.countDocuments();
    //if (skip >= numTours) throw new Error('This page does not exist');
    //}

    //Execute QUERY
    // const tours = await query;


    //const tours = JSON.parse(
//fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`)
//);
/*
exports.checkID = (req, res, next, val) => {
  console.log(`Tour id is ${val}`)
  if (req.params.id * 1 > tours.length - 1) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }
  next();

}

exports.checkBody = (req, res, next) => {
  if(!req.body.name || !req.body.price){
    return res.status(400).json({
      status: 'fail',
      message: 'Missing name or price'
    })
  }
  next()
}
*/

 /*
  const newId = tours[tours.length - 1].id + 1;
  const newTour = Object.assign({ id: newId }, req.body);
  tours.push(newTour);
  fs.writeFile(
    `${__dirname}/dev-data/data/tours-simple.json`,
    JSON.stringify(tours),
    (err) => {
      res.status(201).json({
        status: 'success',
        data: {
          tour: newTour,
        },
      });
    }
  );
  //res.send('Done');
  */

  //const tour = tours.find((el) => el.id === id);
  //if(id > tours.length){

  //


  /*
app.get('/', (req, res) => {
  res.status(200).json({message: 'Hello from the server side!', app:'natours'});
});
app.post('/', (req, res )=>{
  res.send('You can post to this endpoint...')
})
*/

//app.get('/api/v1/tours', getAllTours);
//app.post('/api/v1/tours', createTour);
//app.patch('/api/v1/tours/:id', updateTour);
//app.delete('/api/v1/tours/:id', deleteTour);
//app.get('/api/v1/tours/:id', getTour);

//router.param('id', tourController.checkID)
//router.use(tourController.checkBody);
/*
tourSchema.pre('save', function (next){
  console.log('Will save document')
  next();
} )

tourSchema.post('save',  (doc, next) => {
  console.log(doc);
  next();
});

app.use((req, res, next) => {
  console.log('Hello from middleware');
  next();
});

// res.status(404).json({
   // status: 'fail',
   // message: `Can't find ${req.originalUrl} on this server`,
 // });
  const err = new Error(`Can't find ${req.originalUrl} on this server`)
err.status = 'fail';
err.statusCode = 404;



const catchAsync = (fn) => (req, res, next) => {
  fn(req, res, next).catch(next);
  
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: err,
    });
  }
};



 router.route('/:tourId/reviews').post(authController.protect, authController.restrictTo('user'), reviewController.createReview)



 catchAsync(async (req, res, next) => {
  const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
    runValidators: true,
  });
  if (!tour) {
    return next(new AppError('No tour found with this ID', 404));
  }

  res.status(200).json({
    status: 'success',
    data: {
      tour,
    },
  });
});


catchAsync(async (req, res, next) => {
  const newTour = await Tour.create(req.body);
  res.status(201).json({
    status: 'success',
    data: {
      tour: newTour,
    },
  });
});



exports.createReview = catchAsync( async (req, res, next) => {
    //Nested routes
   

    const newReview = await Review.create(req.body);
    res.status(200).json({
        status: 'success',
        data: {
            review: newReview
        }
    })
})



exports.deleteTour = catchAsync(async (req, res, next) => {
    const tour = await Tour.findByIdAndDelete(req.params.id);
     if (!tour) {
       return next(new AppError('No tour found with this ID', 404));
     }
   
     res.status(204).json({
       status: 'success',
       data: null,
     });
   });


   catchAsync(async (req, res, next) => {
  const tour = await Tour.findById(req.params.id).populate('reviews')
  if (!tour) {
    return next(new AppError('No tour found with this ID', 404));
  }

  res.status(200).json({
    status: 'success',
    data: {
      tour,
    },
  });
});


/*catchAsync(async (req, res, next) => {
 const tour = await Tour.findByIdAndDelete(req.params.id);
  if (!tour) {
    return next(new AppError('No tour found with this ID', 404));
  }

  res.status(204).json({
    status: 'success',
    data: null,
  });
});



(req, res) => {
  res.status(500).json({
    status: 'error',
    message: 'This route is not yet defined!',
  });
};



exports.updateUser = (req, res) => {
  res.status(500).json({
    status: 'error',
    message: 'This route is not yet defined!',
  });
};
exports.deleteUser = (req, res) => {
  res.status(500).json({
    status: 'error',
    message: 'This route is not yet defined!',
  });
};


catchAsync(async (req, res, next) => {
  const features = new APIFeatures(Tour.find(), req.query)
    .filter()
    .sort()
    .limitFields()
    .paginate();
  const tours = await features.query;

  res.status(200).json({
    status: 'success',
    results: tours.length,
    data: {
      tours,
    },
  });
});
catchAsync(async (req, res, next) => {
  const users = await User.find();
  res.status(200).json({
    status: 'success',
    results: users.length,
    data: users,
  });
});

catchAsync(async (req, res, next) => {
  let filter = {};
  if (req.params.tourId) filter = { tour: req.params.tourId };

  const reviews = await Review.find(filter);
  res.status(200).json({
    status: 'success',
    results: reviews.length,
    data: reviews,
  });
});

app.use(express.static(`${__dirname}/public`));


//PUG 
doctype html 
html 
    head
        title Natours | #{tour} 
        link(rel='sylesheet' href='css/style.css')
        link(rel='shortcut icon' type='image/png' href='img/favicon.png')

    body
        h1= tour
        h1 The Park Camper
        h2= user.toUpperCase()

        -const x = 9
        h2=2*x
        p This is just some text


//Rendering
        router.get('/', (req, res) => {
    res.status(200).render('base', {
      tour: "The Forest Hiker",
      user: "Alex"
    })
  })



  const message = `Forgot your password? Submit a PATCH request with your new password and passwordConfirm to: ${resetURL}.\nIf you did not forget your password, please ignore this email!`;
 
  //await sendEmail({
      //email: user.email,
      //subject: 'Your password reset token (valid for 10 min)',
      //message,
//});


const Stripe = require('stripe');


const stripe = Stripe(
  'pk_test_51PIFCQJZmlCdbHpvJk0X6vdlO8cpRhv5EZRaBu5VYn6GuColiTW3BhskfC7w2jfZUh3M58oarekbLXEATD8QMABy00eouOF3ia',
);
/*
  const bookings = await this.find({ tour: tourId }).populate('date');
  bookings.forEach(async (el) => {
    el.date.participants += 1;
    await Dates.findByIdAndUpdate({participants: el.date.participants + 1})
    if(el.date.participants === el.tour.maxGroupSize) {
    el.date.soldOut = true
    }
  });
};

bookingSchema.pre('save', function(next){
   this.populate({path: 'date'})
  console.log(this)
  if(this.date.soldOut === true) {
    return next(new AppError("You can't book this date for the tour because it is sold out!", 400))
  }
  next()
})

//await stripe.redirectToCheckout({
    //sessionId: session.data.session.id,
    //});  

    
tourSchema.post(/^find/, function (docs, next) {
  //console.log(docs)
  console.log(`Query took ${Date.now() - this.start} milliseconds`);
  next();
});

 document.getElementById('map').addEventListener('mouseenter', () =>
        map.fitBounds(bounds, {
          padding: {
            top: 200,
            bottom: 200,
            left: 100,
            right: 100,
          },
        }))
        */


  

 